#!/usr/bin/env ruby

begin
  require 'quest'
  require 'gli'
  require 'net/http'
  require 'json'
rescue
  require 'rubygems'
  require 'quest'
  require 'gli'
  require 'json'
end

module GLIWrapper
  include GLI::App
  extend self

  BASE_URI = URI('http://localhost:4567/')

  def get_path(*path)
    Net::HTTP.get(URI.join(BASE_URI, *path))
  end

  def post_path(form_data, *path)
    Net::HTTP.post_form(URI.join(BASE_URI, *path), form_data)
  end

  def offer_bailout(message)
    print "#{message} Continue? [Y/n]:"
    raise "Cancelled" unless [ 'y', 'yes', ''].include? STDIN.gets.strip.downcase
  end

  def fancy_status
    active_quest = get_path('active_quest')
    output = "Quest: #{active_quest}\n"
    examples = JSON.parse(get_path('status/', 'examples'))
    examples.each do |example|
      if example["status"] == "passed"
        output << 'âˆš '.green
      else
        output << 'X '.yellow
      end
      output << example["full_description"] + "\n"
    end
    output
  end

  def summary_status
    active_quest = get_path('active_quest')
    output = "Quest: #{active_quest} - Progress: "
    summary = JSON.parse(get_path('status/', 'summary'))
    complete_count = summary["example_count"].to_i - summary["failure_count"].to_i
    output << "#{complete_count} of #{summary['example_count']} tasks."
  end

  program_desc 'Track the status of quests and tasks.'

  desc 'Begin a quest'
  arg :quest_name
  arg_name 'quest_name'
  command :begin do |c|
    c.action do |global_options, options, args|
      if args.length < 1
        raise 'You must specify a quest name. Refer to the Quest Guide or use the "quest list" command.'
      elsif not JSON.parse(get_path('quests')).include? args[0]
        raise "#{args[0]} is not a valid quest name. Refer to the Quest Guide or use the \"quest list\" command."
      elsif not get_path('status/', 'summary/', 'failure_count') == '0'
        offer_bailout("The current quest is not complete. If you begin a new quest, your agent nodes will be reset. Your master node and Puppet code will not be affected.\n")
      end
      post_path({}, 'begin/', args[0])
    end
  end

  desc 'List available quests'
  command :list do |c|
    c.action do |global_options, options, args|
      puts JSON.parse(get_path('quests'))
    end
  end

  desc 'Show status of the current quest'
  command :status do |c|
    c.switch [:s], :desc => 'Show status in summary form.'
    c.action do |global_options, options, args|
      if options[:s]
        puts summary_status 
      else
        puts fancy_status
      end
    end
  end

  exit run(ARGV)
end
